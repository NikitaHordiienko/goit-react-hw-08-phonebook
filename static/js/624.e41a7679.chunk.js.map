{"version":3,"file":"static/js/624.e41a7679.chunk.js","mappings":"sNAEaA,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EAEtBC,EAAkB,SAAAH,GAAK,OAAIA,EAAMC,SAASG,SAAnB,EAEvBC,EAAc,SAAAL,GAAK,OAAIA,EAAMC,SAASK,KAAnB,EAInBC,GAAwBC,EAAAA,EAAAA,IACjC,CAACT,EAH+B,SAAAC,GAAK,OAAIA,EAAMS,OAAOC,KAAjB,IAIrC,SAACT,EAAUU,GAAsB,IAAD,EACtBC,GAAmB,UAAAD,EAAiBD,aAAjB,eAAwBG,gBAAiB,GAElE,OAAOZ,EAASQ,QAAO,SAAAK,GAAO,OAC1BA,EAAQC,KAAKF,cAAcG,SAASJ,EADV,GAGjC,I,oBCjBL,EAAgC,gCCAhC,EAA0B,yBAA1B,EAAgE,4B,UCgBhE,EAdgB,SAAC,GAAyB,IAAvBK,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACtB,OACI,qBAASC,UAAWC,EAApB,WACI,eAAID,UAAWC,EAAf,SAAmCH,IAClCC,IAGZ,E,UCTD,EAA2B,8BAA3B,EAAiE,2BAAjE,EAAyG,gCAAzG,EAAsJ,gCAAtJ,EAAmM,gCCKpL,SAASG,IACpB,IAAMC,GAAWC,EAAAA,EAAAA,MACXtB,GAAWuB,EAAAA,EAAAA,IAAYzB,GAwB7B,OAEI,kBAAMoB,UAAWC,EAAcK,aAAa,MAAMC,SAxBjC,SAAAC,GACjBA,EAAMC,iBAEN,IAAMC,EAAOF,EAAMG,OACbf,EAAOc,EAAKE,SAAShB,KAAKL,MAC1BsB,EAASH,EAAKE,SAASC,OAAOtB,MAMpC,GAJwBT,EAASgC,MAAK,SAAAnB,GAAO,OACzCA,EAAQC,OAASA,CADwB,IAOzC,OAFAmB,EAAAA,GAAAA,MAAA,UAAenB,EAAf,iCACAc,EAAKM,QAITb,GAASc,EAAAA,EAAAA,IAAW,CAACrB,KAAAA,EAAMiB,OAAAA,KAE3BH,EAAKM,OACR,EAIG,WACI,iBAAKhB,UAAWC,EAAhB,WACI,kBACAD,UAAWC,EACXiB,KAAK,OACLtB,KAAK,OACLuB,QAAQ,yHACRrB,MAAM,yIACNsB,UAAQ,KAER,kBAAOpB,UAAWC,EAAgBoB,QAAQ,OAA1C,sBAEJ,iBAAKrB,UAAWC,EAAhB,WACI,kBACAD,UAAWC,EACXiB,KAAK,MACLtB,KAAK,SACLuB,QAAQ,yFACRrB,MAAM,+FACNsB,UAAQ,KAER,kBAAOpB,UAAWC,EAAgBoB,QAAQ,SAA1C,wBAEJ,mBAAQrB,UAAWC,EAAgBiB,KAAK,SAAxC,2BAGX,C,mDC3DD,EAA0B,kCAA1B,EAAoE,gCAApE,EAAkH,sCAAlH,EAAuK,uCAAvK,EAAqN,+BAArN,EAAgQ,oCAAhQ,EAAgT,oCAAhT,EAAiW,qCCS3VI,EAAYC,SAASC,cAAc,eAE1B,SAASC,EAAT,GAA2D,IAA9B7B,EAA6B,EAA7BA,KAAMiB,EAAuB,EAAvBA,OAAQa,EAAe,EAAfA,GAAIC,EAAW,EAAXA,QACpDxB,GAAWC,EAAAA,EAAAA,MACXtB,GAAWuB,EAAAA,EAAAA,IAAYzB,IAE7BgD,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAiB,SAAArB,GACA,WAAfA,EAAMsB,MACNH,GAAQ,EAEf,EAID,OAFAI,OAAOC,iBAAiB,UAAWH,GAE5B,WACHE,OAAOE,oBAAoB,UAAWJ,EACzC,CACJ,GAAE,CAACF,IA6CJ,OAAOO,EAAAA,EAAAA,eACH,gBAAKlC,UAAWC,EAAakC,QAAS,SAAA3B,GAAK,OA5CnB,SAAAA,GACpBA,EAAMG,SAAWH,EAAM4B,eACvBT,GAEP,CAwCkDU,CAAoB7B,EAAxB,EAA3C,UACI,iBAAKR,UAAWC,EAAhB,WACI,mBAAQD,UAAWC,EAAiBiB,KAAK,SAASiB,QAAS,kBAAMR,GAAQ,EAAd,EAA3D,UACI,SAAC,MAAD,OAEJ,eAAI3B,UAAWC,EAAf,2BAGA,kBAAMD,UAAWC,EAAUM,SA9Cd,SAAAC,GACrBA,EAAMC,iBACN,IAAMC,EAAOF,EAAMG,OACbf,EAAOc,EAAKE,SAAShB,KAAKL,MAC1BsB,EAASH,EAAKE,SAASC,OAAOtB,MAC9B+C,EAAgBxD,EAASgC,MAAK,SAAAnB,GAAO,OAAIA,EAAQ+B,KAAOA,CAAnB,IACrCa,EAAoB,CACtBb,GAAAA,GAWJ,GARIY,EAAc1C,OAASA,IACvB2C,EAAkB3C,KAAOA,GAGzB0C,EAAczB,SAAWA,IACzB0B,EAAkB1B,OAASA,GAG3ByB,EAAc1C,OAASA,GAAQ0C,EAAczB,SAAWA,EAGxD,OAFAE,EAAAA,GAAAA,QAAA,sCACAY,IAIoB7C,EAASgC,MAAK,SAAAnB,GAAO,OACzCA,EAAQC,OAASA,CADwB,KAItB2C,EAAkB3C,OAASA,EAC9CmB,EAAAA,GAAAA,MAAA,UAAenB,EAAf,6BAIJO,GAASqC,EAAAA,EAAAA,IAAYD,IACrBZ,IACH,EAWW,WACI,kBAAO3B,UAAWC,EAAeoB,QAAQ,WAAzC,uBACA,kBACIrB,UAAWC,EACXiB,KAAK,OACLtB,KAAK,OACL8B,GAAG,WACHP,QAAQ,yHACRrB,MAAM,yIACN2C,aAAc7C,EACdwB,UAAQ,KAEZ,kBAAOpB,UAAWC,EAAeoB,QAAQ,aAAzC,yBACA,kBACIrB,UAAWC,EACXiB,KAAK,MACLtB,KAAK,SACL8B,GAAG,aACHP,QAAQ,yFACRrB,MAAM,+FACN2C,aAAc5B,EACdO,UAAQ,KAEZ,mBAAQpB,UAAWC,EAAgBiB,KAAK,SAAxC,kCAIZI,EAEP,CC9GD,MAAuB,8BAAvB,EAA4D,8BAA5D,EAAkG,+BAAlG,EAA0I,gCCkD1I,EA5CwB,SAAC,GAAiB,IAAf3B,EAAc,EAAdA,QACjBQ,GAAWC,EAAAA,EAAAA,MACjB,GAAsCsC,EAAAA,EAAAA,WAAS,GAA/C,eAAOC,EAAP,KAAoBC,EAApB,KAIMC,EAAc,SAAAC,GAChBF,EAAeE,EAClB,EAED,OACI,iCACI,yBACI,iBAAK9C,UAAWC,EAAhB,WACI,eAAGD,UAAWC,EAAd,eAAyB,SAAC,MAAD,IAAzB,IAAoDN,EAAQC,KAA5D,QACA,cAAGI,UAAWC,EAAW8C,KAAM,QAAUpD,EAAQkB,OAAjD,SAA0DlB,EAAQkB,UAClE,mBACIb,UAAWC,EACXiB,KAAK,SACLiB,QAAS,kBAAMU,GAAY,EAAlB,EAHb,UAKI,SAAC,MAAD,OAEJ,mBACI7C,UAAWC,EACXiB,KAAK,SACLiB,QAtBC,kBAAMhC,GAAS6C,EAAAA,EAAAA,IAAcrD,EAAQ+B,IAArC,EAmBL,UAKI,SAAC,MAAD,UAhBH/B,EAAQ+B,IAoBhBiB,IACG,SAAClB,EAAD,CACI7B,KAAMD,EAAQC,KACdiB,OAAQlB,EAAQkB,OAChBa,GAAI/B,EAAQ+B,GACZC,QAASkB,MAK5B,EChDD,EAAuB,0BC8BvB,EAzBoB,WAChB,IAAMI,GAAkB5C,EAAAA,EAAAA,IAAYjB,GAEpC,OACI,eAAIY,UAAWC,EAAf,UACK,OAAIgD,GAAiBC,UAAUC,KAAI,SAAAxD,GAChC,OACI,SAAC,EAAD,CACIA,QAASA,GACJA,EAAQ+B,GAGvB,KAGb,E,UCpBD,EAAwB,sBAAxB,EAA2D,2BAA3D,EAAmG,2BCsBnG,EAnBe,WACX,IAAMvB,GAAWC,EAAAA,EAAAA,MAQjB,OACI,2BACI,iBAAKJ,UAAWC,EAAhB,WACI,kBAAOD,UAAWC,EAAgBL,KAAK,SAASsB,KAAK,OAAOkC,SAT5C,SAAA5C,GACxB,IAAM6C,EAAW7C,EAAMG,OAEvBR,GAASmD,EAAAA,EAAAA,GAAeD,EAAS9D,OACpC,EAKsG6B,UAAQ,KACnG,kBAAOpB,UAAWC,EAAgBoB,QAAQ,SAA1C,uCAIf,ECTc,SAASkC,IACpB,IAAMpD,GAAWC,EAAAA,EAAAA,MACXnB,GAAYoB,EAAAA,EAAAA,IAAYrB,GACxBG,GAAQkB,EAAAA,EAAAA,IAAYnB,GAM1B,OAJA0C,EAAAA,EAAAA,YAAU,WACNzB,GAASqD,EAAAA,EAAAA,MACZ,GAAE,CAACrD,KAGA,iBAAKH,UAAWC,EAAhB,WACI,SAAC,EAAD,CAASH,MAAM,kBAAf,UACI,SAACI,EAAD,OAEJ,UAAC,EAAD,CAASJ,MAAM,gBAAf,WACI,SAAC,EAAD,IACCb,IAAcE,GAAQ,SAACsE,EAAA,EAAD,KAAa,SAAC,EAAD,SAInD,C","sources":["redux/contacts/contactsSelectors.js","webpack://react-homework-template/./src/pages/Contacts/Contacts.module.css?fb9d","webpack://react-homework-template/./src/components/Section/Section.module.css?dbe8","components/Section/Section.jsx","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/EditContactModal/EditContactModal.module.css?937c","components/EditContactModal/EditContactModal.jsx","webpack://react-homework-template/./src/components/ContactListItem/ContactListItem.module.css?7127","components/ContactListItem/ContactListItem.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectContactsFilter = state => state.filter.value;\n\nexport const selectVisibleContacts = createSelector(\n    [selectContacts, selectContactsFilter],\n    (contacts, filteredContacts) => {\n        const normalizedFilter = filteredContacts.value?.toLowerCase() || '';\n\n        return contacts.filter(contact =>\n            contact.name.toLowerCase().includes(normalizedFilter)\n        );\n    }\n)","// extracted by mini-css-extract-plugin\nexport default {\"contactsThumb\":\"Contacts_contactsThumb__L8-yt\"};","// extracted by mini-css-extract-plugin\nexport default {\"section\":\"Section_section__Z2PLw\",\"page-title\":\"Section_page-title__c1brb\"};","import PropTypes from 'prop-types';\nimport css from './Section.module.css';\n\nconst Section = ({ title, children }) => {\n    return (\n        <section className={css.section}>\n            <h2 className={css[\"page-title\"]}>{title}</h2>\n            {children}\n        </section>\n    );\n};\n\nSection.propTypes = {\n    title: PropTypes.string.isRequired,\n    children: PropTypes.node,\n};\n\nexport default Section;","// extracted by mini-css-extract-plugin\nexport default {\"cardForm\":\"ContactForm_cardForm__RExHf\",\"input\":\"ContactForm_input__Bl93P\",\"inputLabel\":\"ContactForm_inputLabel__LEeFC\",\"inputField\":\"ContactForm_inputField__qJkou\",\"formButton\":\"ContactForm_formButton__TN6Jq\"};","import { useDispatch, useSelector } from \"react-redux\";\nimport { toast } from \"react-toastify\";\nimport { addContact } from \"redux/contacts/contactsThunks\";\nimport { selectContacts } from \"redux/contacts/contactsSelectors\";\nimport css from './ContactForm.module.css';\n\nexport default function ContactForm() {\n    const dispatch = useDispatch();\n    const contacts = useSelector(selectContacts);\n    \n    const handleSubmit = event => {\n        event.preventDefault();       \n\n        const form = event.target;\n        const name = form.elements.name.value;\n        const number = form.elements.number.value\n        \n        const existingContact = contacts.find(contact =>\n            contact.name === name\n        );\n\n        if (existingContact) {   \n            toast.error(`${name} is already in contacts`)\n            form.reset();\n            return \n        }\n\n        dispatch(addContact({name, number}));\n\n        form.reset();\n    }    \n\n    return (\n        \n        <form className={css.cardForm} autoComplete=\"off\" onSubmit={handleSubmit}>\n            <div className={css.input}>\n                <input\n                className={css.inputField}\n                type=\"text\"\n                name=\"name\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                required\n                />\n                <label className={css.inputLabel} htmlFor=\"name\">Name</label>\n            </div>\n            <div className={css.input}>\n                <input\n                className={css.inputField}\n                type=\"tel\"\n                name=\"number\"\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                required\n                />\n                <label className={css.inputLabel} htmlFor=\"number\">Number</label>\n            </div>            \n            <button className={css.formButton} type=\"submit\">Add contact</button>\n        </form>\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"overlay\":\"EditContactModal_overlay__cf4TQ\",\"modal\":\"EditContactModal_modal__z6M0E\",\"closeButton\":\"EditContactModal_closeButton__QNnzx\",\"card-heading\":\"EditContactModal_card-heading__OBDBr\",\"form\":\"EditContactModal_form__sPSrC\",\"formLabel\":\"EditContactModal_formLabel__VFS0O\",\"formInput\":\"EditContactModal_formInput__D88wh\",\"formButton\":\"EditContactModal_formButton__lpNKm\"};","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { createPortal } from \"react-dom\";\nimport { IoClose } from \"react-icons/io5\";\nimport { toast } from \"react-toastify\";\nimport PropTypes from 'prop-types';\nimport { editContact } from \"redux/contacts/contactsThunks\";\nimport { selectContacts } from \"redux/contacts/contactsSelectors\";\nimport css from './EditContactModal.module.css';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport default function EditContactModale({ name, number, id, onClose }) {\n    const dispatch = useDispatch();\n    const contacts = useSelector(selectContacts);\n\n    useEffect(() => {\n        const handleCloseKey = event => {\n            if (event.code === 'Escape') {\n                onClose(false)\n            }\n        };\n\n        window.addEventListener('keydown', handleCloseKey);\n\n        return () => {\n            window.removeEventListener('keydown', handleCloseKey);\n        };\n    }, [onClose])\n\n    const handleBackDropClick = event => {\n        if (event.target === event.currentTarget) {\n            onClose()\n        }\n    };\n\n    const handleEditSubmit = event => {\n        event.preventDefault();\n        const form = event.target;\n        const name = form.elements.name.value;\n        const number = form.elements.number.value\n        const editedContact = contacts.find(contact => contact.id === id)\n        const editedContactInfo = {\n            id,\n        }\n\n        if (editedContact.name !== name) {\n            editedContactInfo.name = name\n        }\n\n        if (editedContact.number !== number) {\n            editedContactInfo.number = number\n        }\n\n        if (editedContact.name === name && editedContact.number === number) {\n            toast.warning(`You haven't changed anything.`)\n            onClose()\n            return \n        }\n\n        const existingContact = contacts.find(contact =>\n            contact.name === name\n        );\n\n        if (existingContact && editedContactInfo.name === name) {      \n            toast.error(`${name} is already in contacts`)\n            return \n        }\n\n        dispatch(editContact(editedContactInfo))\n        onClose()\n    }\n\n    return createPortal(\n        <div className={css.overlay} onClick={event => handleBackDropClick(event)} >\n            <div className={css.modal}>\n                <button className={css.closeButton} type='button' onClick={() => onClose(false)}>\n                    <IoClose />\n                </button>\n                <h2 className={css['card-heading']}>\n\t\t\t\t    Edit contact\n\t\t\t    </h2>\n                <form className={css.form} onSubmit={handleEditSubmit}>\n                    <label className={css.formLabel} htmlFor=\"editName\">New name</label>\n                    <input\n                        className={css.formInput}\n                        type=\"text\"\n                        name=\"name\"\n                        id=\"editName\"\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                        defaultValue={name}\n                        required\n                    />\n                    <label className={css.formLabel} htmlFor=\"editNumber\">New number</label>\n                    <input\n                        className={css.formInput}\n                        type=\"tel\"\n                        name=\"number\"\n                        id=\"editNumber\"\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                        defaultValue={number}\n                        required\n                    />\n                    <button className={css.formButton} type=\"submit\">Save changes</button>\n                </form>\n            </div>\n        </div>,\n        modalRoot,\n    )\n}\n\nEditContactModale.propTypes = {\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    onClose: PropTypes.func.isRequired,\n}","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ContactListItem_item__UAAix\",\"text\":\"ContactListItem_text__QXs1+\",\"phone\":\"ContactListItem_phone__eLbis\",\"button\":\"ContactListItem_button__SG6H2\"};","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { MdPermContactCalendar, MdDelete, MdEdit } from \"react-icons/md\";\nimport { deleteContact } from 'redux/contacts/contactsThunks';\nimport EditContactModale from 'components/EditContactModal/EditContactModal';\nimport css from './ContactListItem.module.css';\n\nconst ContactListItem = ({ contact }) => {\n    const dispatch = useDispatch();\n    const [isModalOpen, setIsModalOpen] = useState(false);\n\n    const handleDelete = () => dispatch(deleteContact(contact.id));\n\n    const toggleModal = toggle => {\n        setIsModalOpen(toggle)\n    }\n\n    return (\n        <>\n            <li key={contact.id} >\n                <div className={css.item}>                    \n                    <p className={css.text}> <MdPermContactCalendar /> {contact.name}:</p>\n                    <a className={css.phone} href={\"tell:\" + contact.number}>{contact.number}</a>\n                    <button\n                        className={css.button}\n                        type=\"button\"\n                        onClick={() => toggleModal(true)}\n                    >\n                        <MdEdit />\n                    </button>\n                    <button\n                        className={css.button}\n                        type=\"button\"\n                        onClick={handleDelete}\n                    >\n                        <MdDelete />\n                    </button>\n                </div>            \n            </li>\n            {isModalOpen &&\n                <EditContactModale\n                    name={contact.name}\n                    number={contact.number}\n                    id={contact.id}\n                    onClose={toggleModal}\n                />\n            }\n        </>\n    )\n}\n\nexport default ContactListItem;","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\"};","import { useSelector } from \"react-redux\";\nimport { selectVisibleContacts } from \"redux/contacts/contactsSelectors\";\nimport PropTypes from 'prop-types';\nimport ContactListItem from \"components/ContactListItem/ContactListItem\";\nimport css from './ContactList.module.css';\n\nconst ContactList = () => {\n    const visibleContacts = useSelector(selectVisibleContacts);\n\n    return (\n        <ul className={css.list}>\n            {[...visibleContacts].reverse().map(contact => {\n                return (\n                    <ContactListItem\n                        contact={contact}\n                        key={contact.id}\n                    />\n                )\n             })}\n        </ul>\n    )\n}\n\nContactList.propTypes = {\n    contact: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n    })\n}\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"Filter_input__N7T3z\",\"inputLabel\":\"Filter_inputLabel__AHo9j\",\"inputField\":\"Filter_inputField__GiGjH\"};","import { useDispatch } from 'react-redux';\nimport { filterContacts } from 'redux/contacts/slices/filterSlice';\nimport css from './Filter.module.css';\n\nconst Filter = () => {\n    const dispatch = useDispatch();\n    \n    const getFilteredContacts = event => {\n        const filtered = event.target;\n        \n        dispatch(filterContacts(filtered.value))\n    }\n\n    return (\n        <form>\n            <div className={css.input}>\n                <input className={css.inputField} name='filter' type=\"text\" onChange={getFilteredContacts} required/>\n                <label className={css.inputLabel} htmlFor=\"filter\">Find contacts by name</label>\n            </div>\n        </form>        \n    )    \n}\n\nexport default Filter;","import { useEffect} from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectError, selectIsLoading } from \"redux/contacts/contactsSelectors\";\nimport { fetchContacts } from \"redux/contacts/contactsThunks\";\nimport Loader from \"components/Loader/Loader\";\nimport css from './Contacts.module.css';\n\nimport Section from \"../../components/Section/Section\";\nimport ContactForm from \"../../components/ContactForm/ContactForm\";\nimport ContactList from \"../../components/ContactList/ContactList\";\nimport Filter from \"../../components/Filter/Filter\";\n\nexport default function Contacts() {\n    const dispatch = useDispatch();\n    const isLoading = useSelector(selectIsLoading);\n    const error = useSelector(selectError);\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n    return (\n        <div className={css.contactsThumb}>\n            <Section title=\"Add new contact\">\n                <ContactForm />\n            </Section>\n            <Section title=\"Your contacts\">\n                <Filter />\n                {isLoading && !error ? <Loader /> : <ContactList  />}\n            </Section>\n        </div>\n    )\n}"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","filter","value","filteredContacts","normalizedFilter","toLowerCase","contact","name","includes","title","children","className","css","ContactForm","dispatch","useDispatch","useSelector","autoComplete","onSubmit","event","preventDefault","form","target","elements","number","find","toast","reset","addContact","type","pattern","required","htmlFor","modalRoot","document","querySelector","EditContactModale","id","onClose","useEffect","handleCloseKey","code","window","addEventListener","removeEventListener","createPortal","onClick","currentTarget","handleBackDropClick","editedContact","editedContactInfo","editContact","defaultValue","useState","isModalOpen","setIsModalOpen","toggleModal","toggle","href","deleteContact","visibleContacts","reverse","map","onChange","filtered","filterContacts","Contacts","fetchContacts","Loader"],"sourceRoot":""}